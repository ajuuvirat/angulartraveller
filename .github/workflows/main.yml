name: Angular Application CI/CD

on:
  push:
    branches:
      - main  # Change this to your default branch, e.g., 'prod', 'master', etc.

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Setup Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'  # Specify the node version here

    # Step 3: Install dependencies
    - name: Install dependencies
      run: |
        npm install

    # Step 4: Build the Angular project
    - name: Build Angular project
      run: |
        npm run build --prod  # The build command may vary if you're using different configurations

    # Step 5: Build Docker Image for Deployment
    - name: Build Docker Image
      run: |
        docker build -t $DOCKER_IMAGE_NAME .  # Make sure to replace with your Docker image name

    # Step 6: Push Docker Image to Docker Hub or AWS ECR
    - name: Push Docker image to Docker Hub
      run: |
        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        docker push $DOCKER_IMAGE_NAME  # Replace with your Docker Hub image name

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: production

    steps:
    # Step 1: Checkout code (for debugging or fetching deployment configurations)
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up SSH key for server access
    - name: Set up SSH key for server
      run: |
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        mkdir -p ~/.ssh
        echo "$SSH_HOST" >> ~/.ssh/known_hosts
        ssh-keyscan -t rsa $SSH_HOST >> ~/.ssh/known_hosts

    # Step 3: Test SSH connection (optional but recommended)
    - name: Test SSH connection
      run: |
        ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "echo SSH connection established"

    # Step 4: Deploy the Docker image to the server
    - name: Deploy Docker container on server
      run: |
        ssh $SSH_USER@$SSH_HOST << 'EOF'
          docker pull $DOCKER_IMAGE_NAME  # Pull the Docker image
          docker stop $(docker ps -q --filter "ancestor=$DOCKER_IMAGE_NAME") || true  # Stop running containers from the same image
          docker rm $(docker ps -a -q --filter "ancestor=$DOCKER_IMAGE_NAME") || true  # Remove any old containers
          docker run -d -p 80:80 $DOCKER_IMAGE_NAME  # Run the new container (adjust ports accordingly)
        EOF
