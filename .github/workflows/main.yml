name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t ajuua/sampletest:latest .

      # Push the Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker push ajuua/sampletest:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up SSH with passphrase handling
      - name: Start ssh-agent and add private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Start ssh-agent and add the private key
          eval $(ssh-agent -s)
          echo "${{ secrets.SSH_KEY_PASSPHRASE }}" | ssh-add ~/.ssh/id_rsa

      # Add server to known hosts to prevent SSH warnings
      - name: Add server to known hosts
        run: |
          ssh-keyscan -H 64.227.159.217 >> ~/.ssh/known_hosts

      # Test SSH connection to the server
      - name: Test SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no root@64.227.159.217 "echo 'SSH connection successful'"

      # Deploy the Docker container to the server
      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no root@64.227.159.217 << 'EOF'
            # Pull the latest Docker image from Docker Hub
            docker pull ajuua/sampletest:latest
            
            # Stop and remove any existing container if it exists
            docker stop angular-app || true
            docker rm angular-app || true

            # Run the Docker container on port 8100
            docker run -d -p 8100:8100 --restart unless-stopped --name angular-app ajuua/sampletest:latest
          EOF
