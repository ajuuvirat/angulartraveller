name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build Docker Image
      - name: Build Docker Image
        run: |
          echo "Building Docker image..."
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-app:latest .
          docker images

      # Step 4: Push Docker Image to Docker Hub
      - name: Push Docker Image
        run: |
          echo "Pushing Docker image..."
          docker push ${{ secrets.DOCKER_USERNAME }}/my-app:latest

      # Step 5: Set up SSH Key
      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Step 6: Start SSH Agent and Add Private Key
      - name: Start SSH Agent and Add Private Key
        run: |
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa

      # Step 7: Deploy and Run Docker Container on Server
      - name: Deploy Docker Container
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          # Pull the latest Docker image
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-app:latest
          
          # Stop and remove any existing container running on port 8100
          docker ps -q --filter "name=my-app-container" | grep -q . && docker stop my-app-container && docker rm my-app-container || true
          
          # Run the new container on port 8100
          docker run -d -p 8100:8100 --name my-app-container ${{ secrets.DOCKER_USERNAME }}/my-app:latest
          EOF
